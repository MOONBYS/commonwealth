import * as Sequelize from 'sequelize';
import { Model, DataTypes } from 'sequelize';

import { ChainAttributes } from './chain';
import { ModelStatic } from './types';

export interface CMNProtocolAttributes {
  id: string;
  name: string;
  project_protocol: string;
  collective_protocol: string;
  active: boolean;
  chain: string,

  // associatations
  Chain: ChainAttributes;
}

export interface CMNProtocolInstance
extends Model<CMNProtocolAttributes>, CMNProtocolAttributes {}

export type CMNProtocolModelStatic = ModelStatic<CMNProtocolInstance>

export default (
  sequelize: Sequelize.Sequelize,
  dataTypes: typeof DataTypes,
): CMNProtocolModelStatic => {
  const CMNProtocol = <CMNProtocolModelStatic>sequelize.define(
    'CMNProtocol', {
      id: { type: Sequelize.STRING, primaryKey: true }, // autogenerated,
      name: { type: Sequelize.STRING, allowNull: false },
      project_protocol: { type: Sequelize.STRING, allowNull: false },
      collective_protocol: { type: Sequelize.STRING, allowNull: false },
      chain: { type: Sequelize.STRING, allowNull: false },
      active: { type: dataTypes.BOOLEAN, allowNull: false, defaultValue: true }
    }, {
      tableName: 'CMNProtocol',
      underscored: true,
      createdAt: 'created_at',
      updatedAt: 'updated_at',
    }
  );

  CMNProtocol.associate = (models) => {
    models.CMNProtocol.belongsTo(models.Chain, { foreignKey: 'chain', targetKey: 'id' });
  };

  return CMNProtocol;
};
